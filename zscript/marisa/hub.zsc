// hub-related stuff (inventory resets, the lore giving npc, the central artifact pieces)
Class mkSavedInventory : Actor
{
	Inventory InvSel, InvFirst;
	Weapon rw;
	Default
	{
		+NOGRAVITY;
		+NOBLOCKMAP;
		+DONTSPLASH;
	}
}

Class mkInventoryResetHandler : EventHandler
{
	private void RetrieveInventory( mkSavedInventory saved, PlayerPawn giveto )
	{
		Inventory i, prev, next, top;
		prev = null;
		i = saved.inv;
		top = giveto.inv;
		if ( top )
		{
			while ( top.inv )
			{
				top = top.inv;
			}
		}
		while ( i )
		{
			next = i.inv;
			if ( !i.bUNDROPPABLE )
			{
				if ( top )
				{
					top.inv = i;
					top = i;
				}
				else giveto.inv = top = i;
				i.owner = giveto;
				i.inv = null;
				if ( saved.inv == i ) saved.inv = next;
				if ( prev ) prev.inv = next;
			}
			else prev = i;
			i = next;
		}
		giveto.invsel = saved.invsel;
		giveto.invfirst = saved.invfirst;
		if ( saved.rw )
		{
			giveto.player.PendingWeapon = giveto.player.ReadyWeapon = saved.rw;
			giveto.BringUpWeapon();
		}
		else
		{
			giveto.player.ReadyWeapon = null;
			giveto.player.PendingWeapon = WP_NOCHANGE;
		}
	}

	private void StashInventory( mkSavedInventory stored, PlayerPawn takefrom )
	{
		Inventory i, prev, next, top;
		prev = null;
		i = takefrom.inv;
		top = stored.inv;
		if ( top )
		{
			while ( top.inv )
			{
				top = top.inv;
			}
		}
		while ( i )
		{
			next = i.inv;
			if ( !i.bUNDROPPABLE )
			{
				if ( top )
				{
					top.inv = i;
					top = i;
				}
				else stored.inv = top = i;
				i.owner = stored;
				i.inv = null;
				if ( takefrom.inv == i ) takefrom.inv = next;
				if ( prev ) prev.inv = next;
			}
			else prev = i;
			i = next;
		}
		stored.invsel = takefrom.invsel;
		stored.invfirst = takefrom.invfirst;
		if ( takefrom.invsel && (takefrom.invsel.owner != takefrom) ) takefrom.invsel = null;
		if ( takefrom.invfirst && (takefrom.invfirst.owner != takefrom) ) takefrom.invfirst = null;
		stored.rw = takefrom.player.ReadyWeapon;
		takefrom.player.ReadyWeapon = null;
		takefrom.player.PendingWeapon = WP_NOCHANGE;
	}

	private mkSavedInventory FindSavedInventory( int i )
	{
		let t = ThinkerIterator.Create("mkSavedInventory");
		mkSavedInventory a;
		while ( a = mkSavedInventory(t.Next()) )
		{
			if ( a.special1 == i ) return a;
		}
		return null;
	}

	override void WorldUnloaded( WorldEvent e )
	{
		if ( e.IsSaveGame ) return;
		// stash away current inventory
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] || !players[i].mo ) continue;
			mkSavedInventory stored = FindSavedInventory(i);
			if ( !stored )
			{
				stored = mkSavedInventory(players[i].mo.Spawn("mkSavedInventory"));
				stored.special1 = i;
			}
			StashInventory(stored,players[i].mo);
		}
	}

	override void WorldLoaded( WorldEvent e )
	{
		if ( e.IsSaveGame ) return;
		// clear previous inventory then restore saved one (if any)
		for ( int j=0; j<MAXPLAYERS; j++ )
		{
			if ( !playeringame[j] || !players[j].mo ) continue;
			players[j].mo.ClearInventory();
			mkSavedInventory saved = FindSavedInventory(j);
			if ( saved ) RetrieveInventory(saved,players[j].mo);
			else
			{
				players[j].mo.GiveDefaultInventory();
				// fixup, remove repeated copies of BasicArmor/HexenArmor from inventory
				Inventory i, prev, next, ba, ha;
				prev = ba = ha = null;
				i = players[j].mo.inv;
				while ( i )
				{
					next = i.inv;
					if ( i is 'BasicArmor' )
					{
						if ( !ba ) ba = i;
						else
						{
							if ( players[j].mo.inv == i ) players[j].mo.inv = next;
							if ( prev ) prev.inv = next;
							else prev = next;
							i.Destroy();
						}
					}
					else if ( i is 'HexenArmor' )
					{
						if ( !ha ) ha = i;
						else
						{
							if ( players[j].mo.inv == i ) players[j].mo.inv = next;
							if ( prev ) prev.inv = next;
							else prev = next;
							i.Destroy();
						}
					}
					i = next;
				}
				// set invsel/invfirst to first found selectable item
				for ( Inventory i=players[j].mo.inv; i; i=i.inv )
				{
					if ( !i.bINVBAR ) continue;
					players[j].mo.InvSel = players[j].mo.InvFirst = i;
					break;
				}
			}
			if ( players[j].PendingWeapon != WP_NOCHANGE )
				players[j].mo.BringUpWeapon();
		}
	}
}

// the sage proper, stands still but will walk around if he has a goal
Class mkSageNPC : Actor
{
	int scnt;

	Default
	{
		//$Title Sage NPC
		//$Category Marisa/Decoration
		Speed 2;
		Radius 16;
		Height 64;
		MONSTER;
		+NEVERTARGET;
		+FRIENDLY;
		+NODAMAGE;
		-COUNTKILL;
		-SHOOTABLE;
	}
	States
	{
	Spawn:
		SAGE B 2;
		SAGE B 2 A_JumpIf(goal,"See");
		Loop;
	See:
		SAGE # 2
		{
			if ( goal )
			{
				if ( (scnt%12) < 6 ) frame = 1;
				else if ( (scnt%24) < 12 ) frame = 0;
				else frame = 2;
				scnt++;
				A_Chase(null,null);
			}
			return A_JumpIf(!goal,"Spawn");
		}
		Wait;
	Greetings:
		SAGE B 1;
		Goto Spawn;
	}
}

// a ghostly "projection" version of the sage, floats off the ground
Class mkSageProjectionNPC : mkSageNPC
{
	Default
	{
		//$Title Sage NPC (Projection)
		//$Category Marisa/Decoration
		RenderStyle "Translucent";
		Alpha 0.0;
		+NOGRAVITY;
		+FLOATBOB;
		FloatBobStrength 0.1;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SetZ(floorz+8);
	}
	override void Tick()
	{
		Super.Tick();
		// fade based on player distance
		double mindist = double.infinity;
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] || !players[i].mo ) continue;
			double dist = Vec3To(players[i].mo).length();
			if ( dist < mindist ) mindist = dist;
		}
		double talpha = clamp((500-mindist)*0.008,0.0,1.0);
		// alpha has some "pulse" to it
		alpha = (0.75+sin(level.time*10)*0.1)*talpha;
	}
}

Class mkHubGem : Inventory abstract
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.INVBAR;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "You got the %s.";
	}
	override String PickupMessage()
	{
		return String.Format(PickupMsg,GetTag());
	}
	override bool Use( bool pickup )
	{
		if ( pickup ) return false;
		int totalpieces = 0;
		for ( int i=0; i<AllActorClasses.Size(); i++ )
		{
			if ( AllActorClasses[i].GetParentClass() == GetParentClass() ) totalpieces++;
		}
		int numpieces = 0;
		for ( int j=0; j<MAXPLAYERS; j++ )
		{
			if ( !playeringame[j] || !players[j].mo ) continue;
			for ( Inventory i=players[j].mo.inv; i; i=i.inv )
			{
				if ( i.GetParentClass() == GetParentClass() ) numpieces++;
			}
		}
		Owner.A_PlaySound("misc/i_pkup",CHAN_ITEM,local:true);
		if ( numpieces < totalpieces ) Owner.A_Print(String.Format("%d more %s%s left to find.",totalpieces-numpieces,GetDefaultByType((Class<Actor>)(GetParentClass())).GetTag(),((totalpieces-numpieces)>1)?"s":""));
		else Owner.A_Print(String.Format("You have all the %ss.",GetDefaultByType((Class<Actor>)(GetParentClass())).GetTag()));
		return false;
	}
}

Class mkHubGemMundane : mkHubGem abstract
{
	Default
	{
		Tag "Mundane Gem";
	}

	static bool HasAllGems()
	{
		int totalpieces = 0;
		for ( int i=0; i<AllActorClasses.Size(); i++ )
		{
			if ( AllActorClasses[i].GetParentClass() == 'mkHubGemMundane' ) totalpieces++;
		}
		int numpieces = 0;
		for ( int j=0; j<MAXPLAYERS; j++ )
		{
			if ( !playeringame[j] || !players[j].mo ) continue;
			for ( Inventory i=players[j].mo.inv; i; i=i.inv )
			{
				if ( i.GetParentClass() == 'mkHubGemMundane' ) numpieces++;
			}
		}
		return (numpieces>=totalpieces);
	}
}

Class mkHubGemArcane : mkHubGem abstract
{
	Default
	{
		Tag "Arcane Gem";
	}

	static bool HasAllGems()
	{
		int totalpieces = 0;
		for ( int i=0; i<AllActorClasses.Size(); i++ )
		{
			if ( AllActorClasses[i].GetParentClass() == 'mkHubGemArcane' ) totalpieces++;
		}
		int numpieces = 0;
		for ( int j=0; j<MAXPLAYERS; j++ )
		{
			if ( !playeringame[j] || !players[j].mo ) continue;
			for ( Inventory i=players[j].mo.inv; i; i=i.inv )
			{
				if ( i.GetParentClass() == 'mkHubGemArcane' ) numpieces++;
			}
		}
		return (numpieces>=totalpieces);
	}
}

Class mkHubGemFire : mkHubGemMundane
{
	Default
	{
		//$Title Fire Gem
		//$Category Marisa/Key Items
		Inventory.Icon "GEMICN0";
		Tag "Fire Gem";
	}
	States
	{
	Spawn:
		EGEM A -1;
		Stop;
	}
}
Class mkHubGemWater : mkHubGemMundane
{
	Default
	{
		//$Title Water Gem
		//$Category Marisa/Key Items
		Inventory.Icon "GEMICN1";
		Tag "Water Gem";
	}
	States
	{
	Spawn:
		EGEM B -1;
		Stop;
	}
}
Class mkHubGemEarth : mkHubGemMundane
{
	Default
	{
		//$Title Earth Gem
		//$Category Marisa/Key Items
		Inventory.Icon "GEMICN2";
		Tag "Earth Gem";
	}
	States
	{
	Spawn:
		EGEM C -1;
		Stop;
	}
}
Class mkHubGemAir : mkHubGemMundane
{
	Default
	{
		//$Title Air Gem
		//$Category Marisa/Key Items
		Inventory.Icon "GEMICN3";
		Tag "Air Gem";
	}
	States
	{
	Spawn:
		EGEM D -1;
		Stop;
	}
}
Class mkHubGemAether : mkHubGemArcane
{
	Default
	{
		//$Title Aether Gem
		//$Category Marisa/Key Items
		Inventory.Icon "GEMICN4";
		Tag "Aether Gem";
	}
	States
	{
	Spawn:
		EGEM E -1;
		Stop;
	}
}
Class mkHubGemNether : mkHubGemArcane
{
	Default
	{
		//$Title Nether Gem
		//$Category Marisa/Key Items
		Inventory.Icon "GEMICN5";
		Tag "Nether Gem";
	}
	States
	{
	Spawn:
		EGEM F -1;
		Stop;
	}
}
