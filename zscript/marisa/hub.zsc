// hub-related stuff (inventory resets, the lore giving npc, the central artifact pieces)
Class mkInventoryResetHandler : EventHandler
{
	override void WorldLoaded( WorldEvent e )
	{
		if ( e.IsSaveGame || e.IsReopen ) return;
		// reset the inventory of each player on first map load
		// the artifact pieces have +UNDROPPABLE on them, so they should be fine
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] ) continue;
			players[i].mo.ClearInventory();
			players[i].mo.GiveDefaultInventory();
			players[i].mo.BringUpWeapon();
		}
	}
}

Class mkSageNPC : Actor
{
	Default
	{
		Speed 2;
		Radius 16;
		Height 64;
		MONSTER;
		+NEVERTARGET;
		+FRIENDLY;
		+NODAMAGE;
		-COUNTKILL;
		-SHOOTABLE;
	}
	States
	{
	Spawn:
		SAGE B 20 A_SetTics(Random[SageNPC](10,40));
		Goto See;
	See:
		SAGE BBBBBBAAAAAABBBBBBCCCCCC 2
		{
			A_ClearTarget();
			if ( goal ) A_Chase();
			else A_Wander();
		}
		SAGE B 0 A_JumpIf((!goal)&&(!Random[SageNPC](0,2)),"Spawn");
		Loop;
	Greetings:
		SAGE B 1;
		Goto Spawn;
	}
}

Class mkHubGem : Inventory abstract
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.INVBAR;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "You got the %s.";
		Tag "Elemental Gem";
	}
	override String PickupMessage()
	{
		return String.Format(PickupMsg,GetTag());
	}
	override bool Use( bool pickup )
	{
		if ( pickup ) return false;
		int totalpieces = 0;
		for ( int i=0; i<AllActorClasses.Size(); i++ )
		{
			if ( AllActorClasses[i].GetParentClass() == 'mkHubGem' ) totalpieces++;
		}
		int numpieces = 0;
		for ( Inventory i=Owner.inv; i; i=i.inv )
		{
			if ( i is 'mkHubGem' ) numpieces++;
		}
		if ( numpieces < totalpieces ) Owner.A_Print(String.Format("%d more Gems left to find.",totalpieces-numpieces));
		else Owner.A_Print("You have all the Elemental Gems.");
		return false;
	}
}

Class mkHubGemFire : mkHubGem
{
	Default
	{
		Inventory.Icon "GEMICN0";
		Tag "Fire Gem";
	}
	States
	{
	Spawn:
		EGEM A -1;
		Stop;
	}
}
Class mkHubGemWater : mkHubGem
{
	Default
	{
		Inventory.Icon "GEMICN1";
		Tag "Water Gem";
	}
	States
	{
	Spawn:
		EGEM B -1;
		Stop;
	}
}
Class mkHubGemEarth : mkHubGem
{
	Default
	{
		Inventory.Icon "GEMICN2";
		Tag "Earth Gem";
	}
	States
	{
	Spawn:
		EGEM C -1;
		Stop;
	}
}
Class mkHubGemAir : mkHubGem
{
	Default
	{
		Inventory.Icon "GEMICN3";
		Tag "Air Gem";
	}
	States
	{
	Spawn:
		EGEM D -1;
		Stop;
	}
}
Class mkHubGemAether : mkHubGem
{
	Default
	{
		Inventory.Icon "GEMICN4";
		Tag "Aether Gem";
	}
	States
	{
	Spawn:
		EGEM E -1;
		Stop;
	}
}
