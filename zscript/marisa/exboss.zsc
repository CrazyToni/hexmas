// Twin Minotaurs
// When one is defeated, the other will fuse with the dead one, becoming a stronger boss

Class mkMinotaur : Actor
{
	const EXBOSS_TID = 125;

	Actor brother;
	Array<Actor> crowd;
	int ccnt;

	// turns out it can not be blocking
	bool BlockingLineIsBlocking()
	{
		if ( !BlockingLine ) return false;
		// one-sided
		if ( !BlockingLine.sidedef[1] ) return true;
		// blocks us
		if ( BlockingLine.flags&(Line.ML_BLOCKING|Line.ML_BLOCKMONSTERS|Line.ML_BLOCKEVERYTHING) ) return true;
		return false;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		// find brother
		// this will be used to notify of death in order to start phase 2
		let ai = ActorIterator.Create(tid);
		Actor a;
		while ( a = ai.Next() )
		{
			if ( a == self ) continue;
			brother = a;
			break;
		}
		// find crowd
		// they will react to minotaurs attacking and getting hurt
		let ti = ThinkerIterator.Create("mkEttinSpectator");
		while ( a = Actor(ti.Next()) )
			crowd.Push(a);
	}

	double _PitchTo( Actor other )
	{
		if ( !other ) return 0;
		Vector3 otherpos = level.Vec3Diff(Vec3Angle(radius/2,angle,missileheight),other.Vec3Offset(0,0,other.height/2));
		double dist = otherpos.length();
		if ( dist > 0 ) return -asin(otherpos.z/dist);
		return 0;
	}

	override void Tick()
	{
		if ( bNOPAIN && brother.bKILLED )
			vel *= 0;	// stupid fighter punches
		Super.Tick();
	}

	void A_DoNotInterrupt( bool reset = false )
	{
		bNOPAIN = !reset;
	}

	void A_ChargeIntoArena()
	{
		Vector2 dir = RotateVector((speed*1.5,0),angle);
		TryMove(Vec2Offset(dir.x,dir.y),int(maxdropoffheight));
		let bi = BlockThingsIterator.Create(self,radius*3);
		while ( bi.Next() )
		{
			Actor a = bi.Thing;
			if ( !a || (a is 'mkMinotaur') || (!a.bIsMonster && !a.player) || (a.Health <= 0) || (Distance3D(a) > (radius*2+a.radius)) ) continue;
			int dmg = Random[MinotaurMelee](10,15);
			int nd = a.DamageMobj(self,self,dmg,'Melee');
			if ( (a.Mass < LARGE_MASS) && !a.bDONTTHRUST )
			{
				a.vel.xy += dir*1.2/a.mass;
				a.vel.z += 5;
			}
			if ( !a.bNOBLOOD ) a.TraceBleedAngle((nd>0)?nd:dmg,angle,0);
		}
		if ( ccnt&1 )
		{
			let s = Spawn("PunchPuff",pos,ALLOW_REPLACE);
			s.vel.z = 2;
		}
		ccnt++;
		if ( ccnt > 15 )
		{
			ccnt = 0;
			vel.xy = dir;
			SetState(CurState+1);
		}
	}

	void A_CrowdCheer()
	{
		for ( int i=0; i<crowd.Size(); i++ )
			crowd[i].SetStateLabel("Cheer");
	}

	void A_CrowdFlinch( bool all = false )
	{
		for ( int i=0; i<crowd.Size(); i++ )
		{
			if ( !all && Random[Crowd](0,8) ) continue;
			crowd[i].SetStateLabel("Flinch");
		}
	}

	void A_CrowdFlinch2()
	{
		for ( int i=0; i<crowd.Size(); i++ )
			crowd[i].SetStateLabel("Flinch2");
	}

	void A_DecideDash()
	{
		if ( brother.bKILLED || !target || Random[MinotaurDash](0,8) || (Distance2D(target) < 300) ) return;
		// simulate dash in a straight line
		Vector2 dir = RotateVector((speed*1.5,0),AngleTo(target));
		Vector3 oldpos = pos;
		bool success = false;
		for ( int i=0; i<30; i++ )
		{
			if ( TryMove(Vec2Offset(dir.x,dir.y),int(maxdropoffheight)) )
				continue;
			if ( BlockingMobj == target )
			{
				success = true;
				break;
			}
			if ( BlockingLineIsBlocking() || (BlockingMobj && BlockingMobj.bSOLID) )
				break;
		}
		SetOrigin(oldpos,false);
		if ( success )
		{
			ccnt = 0;
			A_CrowdCheer();
			SetStateLabel("Dash");
		}
	}

	void A_Dash()
	{
		A_FaceTarget(1);
		Vector2 dir = RotateVector((speed*1.5,0),angle);
		if ( TryMove(Vec2Offset(dir.x,dir.y),int(maxdropoffheight)) )
		{
			if ( ccnt&1 )
			{
				let s = Spawn("PunchPuff",pos,ALLOW_REPLACE);
				s.vel.z = 2;
			}
			ccnt++;
			if ( ccnt > 30 )
			{
				vel.xy = dir;
				SetStateLabel("DashMiss");
				return;
			}
			return;
		}
		if ( BlockingMobj && BlockingMobj.bSOLID )
		{
			if ( BlockingMobj.bSHOOTABLE )
			{
				int dmg = Random[MinotaurMelee](10,15);
				int nd = BlockingMobj.DamageMobj(self,self,dmg,'Melee');
				if ( (BlockingMobj.Mass < LARGE_MASS) && !BlockingMobj.bDONTTHRUST )
				{
					BlockingMobj.vel.xy += dir*1.2/BlockingMobj.mass;
					BlockingMobj.vel.z += 5;
				}
				if ( !BlockingMobj.bNOBLOOD ) BlockingMobj.TraceBleedAngle((nd>0)?nd:dmg,angle,0);
			}
			vel.xy = -dir*0.5;
			vel.z = 1;
			if ( !BlockingMobj.bSHOOTABLE || BlockingMobj.bNOBLOOD )
				BlockingMobj.A_PlaySound("FighterHammerHitWall");
			else BlockingMobj.A_PlaySound("FighterHammerHitThing");
			A_CrowdCheer();
			SetStateLabel("DashHit");
		}
		vel.xy = -dir*0.5;
		vel.z = 1;
		A_PlaySound("FighterHammerHitWall");
		SetStateLabel("DashHit");
		A_QuakeEx(3,3,3,15,0,200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:50);
	}

	void A_MinotaurMelee( bool ground = false )
	{
		special1 = 0;
		let bi = BlockThingsIterator.Create(self,1024);
		while ( bi.Next() )
		{
			Actor a = bi.Thing;
			if ( !a || (a is 'mkMinotaur') || !a.bSHOOTABLE || (Distance3D(a) > meleerange*2+a.radius) ) continue;
			Vector3 sc = level.SphericalCoords(pos,a.pos,(angle,0));
			if ( abs(sc.x) > 90 ) continue;
			int dmg = Random[MinotaurMelee](18,25);
			int nd = a.DamageMobj(self,self,dmg,'Melee');
			if ( (a.Mass < LARGE_MASS) && !a.bDONTTHRUST )
			{
				a.vel.xy += Vec2To(a).unit()*1500/a.mass;
				a.vel.z += 2;
			}
			if ( !a.bNOBLOOD ) a.TraceBleedAngle((nd>0)?nd:dmg,angle,0);
			if ( a.bNOBLOOD ) a.A_PlaySound("FighterHammerHitWall");
			else a.A_PlaySound("FighterHammerHitThing");
		}
		if ( ground )
		{
			A_PlaySound("FighterHammerHitWall");
			A_QuakeEx(3,3,3,15,0,200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:50);
		}
		A_CrowdCheer();
	}

	void A_MinotaurFireBurst()
	{
		let a = SpawnMissileXYZ(Vec3Angle(radius,angle,missileheight),target,"MinotaurFX1",false);
		a.bTHRUSPECIES = true;
		a.Species = "Minotaur";
		a.angle += (special1*10)-30;
		a.pitch = _PitchTo(target);
		a.angle += FRandom[MinotaurBurst](-5,5);
		a.pitch += FRandom[MinotaurBurst](-5,5);
		a.vel = (cos(a.angle)*cos(a.pitch),sin(a.angle)*cos(a.pitch),-sin(a.pitch))*30;
		special1++;
	}

	void A_MinotaurFireSnake()
	{
		Actor a;
		for ( int i=-1; i<=1; i++ )
		{
			a = SpawnMissileAngle("MinotaurFX2",angle+i*30,0);
			a.bTHRUSPECIES = true;
			a.Species = "Minotaur";
		}
	}

	void A_ChaseBrother()
	{
		tics = 4;
		A_Chase(null,null);
		if ( !goal )
		{
			A_Face(brother);
			SetStateLabel("InitiatePhaseTwo");
		}
	}

	void A_NotifyBrother()
	{
		A_CrowdFlinch(true);
		brother.A_PlaySound(SeeSound,CHAN_VOICE);
		brother.bBUDDHA = true;
		let s = Spawn("PatrolPoint",pos);
		brother.bCHASEGOAL = true;
		brother.goal = s;
	}

	void A_PainDash()
	{
		if ( ccnt > 0 )
		{
			ccnt = 0;
			vel.xy += RotateVector((speed*0.3,0),angle);
		}
	}

	void A_WaitDeath()
	{
		if ( brother.tics != -1 ) return;
		SetState(CurState+1);
	}

	void A_InitiatePhaseTwo()
	{
		A_CrowdFlinch2();
		for ( int i=0; i<10; i++ ) Spawn("mkMinotaurExSmoke",Vec3Angle(radius*2,i*36,0));
		let n = Spawn("mkMinotaurEx",pos);
		n.A_QuakeEx(9,9,9,50,0,3000,"",QF_RELATIVE|QF_SCALEDOWN,falloff:1000);
		n.A_PlaySound("SorcererBigBallExplode",CHAN_6,1.0,false,ATTN_NONE);
		n.A_PlaySound("SorcererBigBallExplode",CHAN_7,1.0,false,ATTN_NONE);
		n.angle = angle;
		n.target = target;
		n.ChangeTid(EXBOSS_TID);
		brother.Destroy();
		ClearCounters();
		Destroy();
	}

	Default
	{
		//$Title Twin Minotaur
		//$Category Marisa/Monsters
		Health 5000;
		Scale 1.5;
		Radius 40;
		Height 150;
		Mass 1500;
		Speed 20;
		Painchance 25;
		MeleeRange 80;
		MissileHeight 120;
		DamageFactor "Fire", 0.5;
		DamageFactor "Ice", 0.7;
		DamageFactor "Falling", 0.0;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+TELESTOMP;
		+NOTARGET;
		+NOTELEFRAG;
		+NOICEDEATH;
		+LAXTELEFRAGDMG;
		+LOOKALLAROUND;
		Species "Minotaur";
		Tag "\cfTwin Minotaur\c-";
		Obituary "%o was burned to a crisp by the Twin Minotaurs.";
		HitObituary "%o got too close to the Twin Minotaurs.";
		SeeSound "MaulatorSight";
		ActiveSound "MaulatorActive";
		PainSound "MaulatorPain";
		DeathSound "MaulatorDeath";
	}
	States
	{
	Spawn:
		MINO X -1;
		Stop;
	Idle:
		MINO A 2 A_Look();
		Loop;
	See:
		MINO ABCD 5
		{
			if ( brother.bKILLED ) A_ChaseBrother();
			else A_Chase();
		}
		MINO A 0 A_DecideDash();
		Loop;
	Dash:
		MINO DC 5 A_FaceTarget();
		MINO U 0 A_PlaySound("BishopAttack",CHAN_7,0.5);
		MINO U 1 A_Dash();
		Wait;
	DashHit:
		MINO A 12;
		Goto See;
	DashMiss:
		MINO A 0 A_PlaySound("minotaur/swing",CHAN_WEAPON);
		MINO V 10;
		MINO Y 4;
		MINO Z 9 A_MinotaurMelee();
		Goto See;
	Melee:
		MINO V 0 A_PlaySound("minotaur/swing",CHAN_WEAPON);
		MINO V 8 A_FaceTarget();
		MINO W 5 A_FaceTarget();
		MINO X 10 A_MinotaurMelee(true);
		Goto See;
	Missile:
		MINO A 0 A_Jump(80,"Missile2");
		MINO A 0 A_PlaySound("MaulatorHamHit",CHAN_WEAPON);
		MINO V 10 A_FaceTarget();
		MINO Y 4 A_FaceTarget();
		MINO Z 0 A_MinotaurMelee();
		MINO ZZZZZZ 1 A_MinotaurFireBurst();
		MINO Z 3;
		Goto See;
	Missile2:
		MINO A 0 A_PlaySound("MaulatorHamSwing",CHAN_WEAPON);
		MINO V 10 A_FaceTarget();
		MINO W 4 A_FaceTarget();
		MINO X 0 A_MinotaurMelee(true);
		MINO X 9 A_MinotaurFireSnake();
		Goto See;
	Pain:
		MINO E 0 A_PainDash();
		MINO E 6 A_CrowdFlinch();
		MINO E 6 A_Pain();
		Goto See;
	ArenaEnter:
		MINO X 4 A_DoNotInterrupt();
		MINO DC 8;
		MINO U 0 A_PlaySound("BishopAttack",CHAN_7,0.5);
		MINO U 1 A_ChargeIntoArena();
		Wait;
		MINO C 0 A_CrowdCheer();
		MINO A 0 A_PlaySound("minotaur/swing",CHAN_WEAPON);
		MINO V 10;
		MINO Y 4;
		MINO Z 9 A_MinotaurMelee();
		MINO A 0 A_DoNotInterrupt(true);
		Goto Idle;
	InitiatePhaseTwo:
		MINO A 0 A_DoNotInterrupt();
		MINO A 1 A_WaitDeath();
		Wait;
		MINO V 20;
		MINO V 8 A_PlaySound("minotaur/swing",CHAN_WEAPON);
		MINO WX 5;
		MINO X 1 A_InitiatePhaseTwo();
		Stop;
	Death:
		MINO F 6 A_NotifyBrother();
		MINO G 5;
		MINO H 6 A_Scream();
		MINO I 5;
		MINO J 6;
		MINO K 5;
		MINO L 6;
		MINO M 5 A_NoBlocking();
		MINO N 6;
		MINO O 5;
		MINO P 6;
		MINO Q 5;
		MINO R 6;
		MINO S 5;
		MINO T -1;
		Stop;
	}
}

Class mkMinotaurExSmoke : Actor
{
	Default
	{
		Scale 2.0;
		Translation "0:32=164:185", "33:50=169:185";
	}
	States
	{
	Spawn:
		MNSM ABCDEFGHIJKLMNOPQ 3 Bright;
		Stop;
	}
}

Class mkMinotaurEx : Actor
{
	Default
	{
		//$Title Twin Minotaur (EX form)
		//$Category Marisa/Monsters
		Scale 2.0;
		Health 12000;
		Radius 56;
		Height 200;
		Mass 3000;
		Speed 24;
		Painchance 25;
		MeleeRange 100;
		DamageFactor "Fire", 0.3;
		DamageFactor "Ice", 0.8;
		DamageFactor "Falling", 0.0;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+TELESTOMP;
		+NOTARGET;
		+NOTELEFRAG;
		+NOICEDEATH;
		+LAXTELEFRAGDMG;
		+LOOKALLAROUND;
		+EXTREMEDEATH;
		Species "Minotaur";
		Tag "\cmHellsmith\c-";
		Obituary "%o was blown to pieces by the Hellsmith.";
		HitObituary "%o was crushed by the Hellsmith.";
	}
	States
	{
	Spawn:
		MIN2 G 80;
		Goto Idle;
	Idle:
		MIN2 A 2 A_Look();
		Wait;
	See:
		MIN2 AABBCCDD 5 A_Chase();
		Loop;
	Pain:
		MIN2 P 4;
		MIN2 P 4 A_Pain();
		Goto See;
	Death:
		MINX A 5;
		MINX B 6 A_Scream();
		MINX C 5;
		MINX D 6;
		MINX E 5;
		MINX F 6;
		MINX G 5 A_NoBlocking();
		MINX H 6;
		MINX I 5;
		MINX J 6;
		MINX K 5;
		MINX L 6;
		MINX M 5;
		MINX N 6;
		MINX O -1;
		Stop;
	}
}
